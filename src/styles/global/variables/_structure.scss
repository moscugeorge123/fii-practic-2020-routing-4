/// Converts received size to `rem`, if validations pass.
///
/// @param {Number} $size - A `pixel` value to be converted to `rem` equivalent.
/// @return {Number} a `rem` value.
@function to-rem($size) {
  @if type-of($size) != number {
    @error 'Only numbers accepted for size.';
  }

  $scale: 0.0625;
  @return #{$scale * $size}rem;
}

/// Validates size to be in a specific interval, otherwise throws an error.
///
/// @param {Number} $size - Value to be checked.
/// @return {Number} `$size` an interval value.
@function size-validation($size) {
  $available-sizes: (1, 2, 3, 4);

  @if not index($available-sizes, $size) {
    $max: max($available-sizes...);
    $min: min($available-sizes...);
    $error-message: 'Size `#{$size}` not available. Size must be a number between #{$min} and #{$max}.';
    @error $error-message;
  }

  @return $size;
}

/// Multiplies received size with 4, if validations pass.
///
/// @example
///   for 16px base and $size: 1, will return to-rem(4) which is 4px
///   for 16px base, pixels equivalent for sizes from 1 to 4: (4, 8, 12, 16)
///
/// @param {Number} $size [1]
/// @return {Number} a `rem` value.
@function small($size: 1) {
  @return to-rem(size-validation($size) * 4);
}

/// Add 2 and multiplies received size with 8, if validations pass.
///
/// @example
///   for 16px base and $size: 1, will return to-rem(24) which is 24px
///   for 16px base, pixels equivalent for sizes from 1 to 4: (24, 32, 40, 48)
///
/// @param {Number} $size [1]
/// @return {Number} a `rem` value.
@function medium($size: 1) {
  @return to-rem((size-validation($size) + 2) * 8);
}

/// Add 3 and multiplies received size with 16, if validations pass.
///
/// @example
///   for 16px base and $size: 1, will return to-rem(64) which is 64px
///   for 16px base, pixels equivalent for sizes from 1 to 4: (64, 80, 96, 112)
///
/// @param {Number} $size [1]
/// @return {Number} a `rem` value.
@function large($size: 1) {
  @return to-rem((size-validation($size) + 3) * 16);
}